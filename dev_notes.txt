integration tests to check each page loading properly
unit tests to check associations properly set up

1, use postgresql
2. user must sign-in to see all but signup page
3. sign-in with devise gem

friend requests
posts with likes and comments
timeline
profile
omniauth signin
sign-up mail with mailer

------------------------

Devise Notes

Some setup you must do manually if you haven't yet:

  1. Ensure you have defined default url options in your environments files. Here
     is an example of default_url_options appropriate for a development environment
     in config/environments/development.rb:

       config.action_mailer.default_url_options = { host: 'localhost', port: 3000 }

     In production, :host should be set to the actual host of your application.

  2. Ensure you have defined root_url to *something* in your config/routes.rb.
     For example:

       root to: "home#index"

  3. Ensure you have flash messages in app/views/layouts/application.html.erb.
     For example:

       <p class="notice"><%= notice %></p>
       <p class="alert"><%= alert %></p>

  4. You can copy Devise views (for customization) to your app by running:

       rails g devise:views

------------------------
------------------------


SETUP

$ rails new fakebook --database=postgresql
  setup gemfile
  make test controller
  check heroku compatibility

$ rails g devise users
$ rails g model Friendship sender:references receiver:references accepted:boolean


USERS

signin
see users
send friend requests
accept requests to become friends
friend request notifications show in navbar


# Data Structures

User
  name:     string
  email:    string

  has_many :friend_requests
  has_many :users, through: :friends
  has_many :posts
  has_many :comments
  has_many :likes
  has_one  :profile
  
Friend Requests
  belongs_to :sender,  class_name: 'User'
  belongs_to :receiver, class_name: 'User'
  
Friendship
  belongs_to :user
  belongs_to :friend, class_name: 'User'
  
Post
  body:  text
  
  belongs_to :author, class_name: 'User'
  has_many   :comments
  has_many   :likes, as: :likeable
  
Comment
  body:   text
  
  belongs_to :author, class_name: 'User'
  belongs_to :post
  has_many   :likes, as: :likeable

Like
  belongs_to :likeable, polymorphic: true
  belongs_to :liker, class_name: 'User'

Profile
  photo: /link/ or image
  
  belongs_to :user
  
-----------------------------

NEXT:

Make account
Sign in
Edit sign in page

Show users
Show buttons by users?

Allow Users to Send Friend Requests
-- able to sign in
-- able to see users
-- able to see send friend request button
Turn Friend Requests into Friendships
-- friend request button shows if friends

Create Posts
Associate Users with Posts


create Posts
Create integration tests for Users owning Posts
make Users own Posts



/users/sign_up
/users/sign_in